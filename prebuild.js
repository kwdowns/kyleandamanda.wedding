const fs = require("fs");
const path = require("path");

generateGalleryImageExports();

function generateGalleryImageExports() {
  let imports = "";
  let exports = "export const images = [";
  let subexports = [];
  const galleryPath = "./public/gallery";
  const exportsFilePath = "./src/data/galleryImages.ts";

  fs.writeFileSync(exportsFilePath, "");

  const files = fs.readdirSync(galleryPath).filter((file) => {
    const extension = path.extname(file).toLowerCase();
    return [".jpg", ".png", ".jpeg", ".gif"].includes(extension);
  });

  files.forEach((file) => {
    const importPath = path.relative(
      "./src/data",
      path.join(galleryPath, file),
    );
    const symbol = path.parse(file).name;

    imports += `import ${symbol} from '${importPath}';\r\n`;
    exports += `\r\n  ${symbol},`;
  });

  const subDirs = fs.readdirSync(galleryPath, { withFileTypes: true })
  .filter((x) => x.isDirectory())
  .map(x => x.name);

  subDirs.forEach((subDir) => {
    const subDirPath = path.join(galleryPath, subDir);
    const subFiles = fs.readdirSync(subDirPath).filter((file) => {
      const extension = path.extname(file).toLowerCase();
      return [".jpg", ".png", ".jpeg", ".gif"].includes(extension);
    });

    subFiles.forEach((file) => {
      const importPath = path.relative(
        "./src/data",
        path.join(subDirPath, file),
      );
      const symbol = path.parse(file).name;
      let subexport = `export const ${subDir} = [';

      imports += `import ${symbol} from '${importPath}';\r\n`;
      subexports.push(`\r\n  ${symbol},`);
    });

  });

  exports = exports.substring(0, exports.length - 1);
  exports += "\r\n];";

  const content = `// Generated by prebuild.js\r\n\r\n${imports}\r\n\r\n${exports}\r\n${subexports.join("\r\n\r\n")}`;

  const existingFileContent = fs.readFileSync(exportsFilePath, "utf8");

  if (content === existingFileContent) {
    console.log("No changes detected in gallery images.");
    return;
  }
  fs.writeFileSync(exportsFilePath, content.replace(/\\/g, "/"));
}
